apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

// butterknife and dagger
kapt {
    generateStubs = true
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {
        applicationId "com.lear7.showcase"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion

        versionCode 3
        versionName "1.2.1.${releaseTime()}"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    // 谨慎开启，debug可以关闭，默认是true
    lintOptions {
        tasks.lint.enabled = false
    }

    signingConfigs {
        release {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }

        debug {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
    }

    flavorDimensions "market"
    // 多渠道使用不同包名
    productFlavors {
        // product name like _360
        client {
            // 定义一些可以读的字段
            buildConfigField "String", "API_URL", "\"http://www.lear7.cc/api\""
            flavorDimensions "market"
            // 可以把主题的颜色放到这里来，也可以放到res里的values文件
            resValue "color", "flavor_color", "#00AAFF"
        }

        // product name like _360
        dev {
            applicationIdSuffix ".test"
            // 与buildType里的参数可以叠加，flavor在前，buildType在后
            versionNameSuffix "-test"
            // 定义一些可以读的字段
            buildConfigField "String", "API_URL", "\"http://test.lear7.cc/api\""
            flavorDimensions "market"
            resValue "color", "flavor_color", "#FF88EE"
        }

        // 把名字加进去
        productFlavors.all { flavor ->
            manifestPlaceholders.put("market_key", name)
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    app_version_key: "release"
            ]

            // 指定不同的flavor使用不同的签名
            productFlavors.client.signingConfig signingConfigs.release
            productFlavors.dev.signingConfig signingConfigs.debug
        }

        // initial a new build type with existed config
        debug.initWith(buildTypes.release)
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            manifestPlaceholders = [
                    app_version_key: "test"
            ]
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    sourceSets {
        // specific the resource folder of different flavor
        clientDebug.res.srcDir 'src/v2/res'
        clientRelease.res.srcDir 'src/v2/res'
    }

    // 屏蔽release签名的dev版本
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.getFlavors().each() { flavor ->
                if (flavor.name.equals('dev')) {
                    variant.setIgnore(true);
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    // 重命名apk
    applicationVariants.all { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.outputs.all { output ->
                def buildName = "AndroidShowcase"
                def releaseApkName = buildName + '_' + "${variant.flavorName}_${variant.buildType.name}" + "_${versionName}.apk"
                outputFileName = releaseApkName
            }
        } else {
            variant.outputs.all { output ->
                def buildName = "AndroidShowcase"
                def releaseApkName = buildName + '_' + "${variant.flavorName}_${variant.buildType.name}" + "_${versionName}.apk"
                outputFileName = releaseApkName
            }
        }
    }

    dataBinding {
        enabled = true
    }

}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation project(":mobileprintsdk")

    // only add test to dev flavor
    testImplementation "junit:junit:$versions.junitVersion"
    androidTestImplementation "androidx.test:runner:$versions.runnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidJunitVersion"

    // androidx
    implementation "androidx.appcompat:appcompat:$versions.appCompatVersion"
    implementation "androidx.recyclerview:recyclerview:$versions.recyclerViewVersion"
    implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayoutVersion"

    // annotation
    implementation "com.android.support:support-annotations:$versions.buildToolsVersion"

    // androi design
    implementation "com.google.android.material:material:$versions.materialVersion"
    implementation "androidx.appcompat:appcompat:$versions.appCompatVersion"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // multidex
    implementation "androidx.multidex:multidex:$versions.multidexVersion"
    implementation "androidx.multidex:multidex-instrumentation:$versions.multidexVersion"

    // architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"
    implementation "androidx.room:room-runtime:$versions.roomVersion"
    kapt "androidx.room:room-compiler:$versions.roomVersion"
    testImplementation "androidx.arch.core:core-testing:$versions.archCompomentVersion"

    // jetpack
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigationVersion"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutinesVersion"
    implementation "com.github.skydoves:whatif:1.0.4"

    // koin
    implementation "org.koin:koin-android:$versions.koinVersion"
    implementation "org.koin:koin-android-scope:$versions.koinVersion"
    implementation "org.koin:koin-android-viewmodel:$versions.koinVersion"

    // Anko
    implementation "org.jetbrains.anko:anko:$versions.ankoVersion"

    // butter knife, 10.2 is latest
    implementation "com.jakewharton:butterknife:$versions.butterknifeVersion"
    kapt "com.jakewharton:butterknife-compiler:$versions.butterknifeVersion"

    // leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakcanaryVersion"

    // blockcanary
    implementation "com.github.markzhai:blockcanary-android:$versions.blockcanaryVersion"

    //  glide
    implementation "com.github.bumptech.glide:glide:$versions.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$versions.glideVersion"

    // fresco
    implementation "com.facebook.fresco:fresco:$versions.frescoVersion"
    // 支持 GIF 动图，需要添加
    implementation "com.facebook.fresco:animated-gif:$versions.frescoVersion"
    // 支持 WebP （静态图+动图），需要添加
    implementation "com.facebook.fresco:animated-webp:$versions.frescoVersion"
    implementation "com.facebook.fresco:webpsupport:$versions.frescoVersion"
    // 仅支持 WebP 静态图，需要添加
    implementation "com.facebook.fresco:webpsupport:$versions.frescoVersion"

    // rxjava
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxjavaVersion"

    // okhttp
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttpVersion"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofitVersion"

    // event bus
    implementation "org.greenrobot:eventbus:$versions.eventbusVersion"

    // dagger2
    implementation "com.google.dagger:dagger:$versions.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$versions.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$versions.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$versions.daggerVersion"
    // for kotlin with dagger2
    implementation "com.google.code.findbugs:jsr305:3.0.2"

    // Arouter
    implementation "com.alibaba:arouter-api:1.5.0"
    kapt "com.alibaba:arouter-compiler:1.2.2"

    // leancloud
    implementation('cn.leancloud:storage-android:6.1.8') {
        exclude group: "com.alibaba', module: 'fastjson"
        exclude group: 'org.ligboy.retrofit2', module: 'converter-fastjson'
    }
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "com.alibaba:fastjson:1.2.62"
    implementation "org.ligboy.retrofit2:converter-fastjson-android:2.2.0"
    implementation "com.google.code.gson:gson:2.8.6"

    // logger
    implementation "com.orhanobut:logger:2.2.0"

    // pdf
    implementation "com.github.barteksc:android-pdf-viewer:2.8.2"
    implementation "com.github.barteksc:pdfium-android:1.9.0"

    // video
    implementation "com.shuyu:GSYVideoPlayer:7.1.1"
    implementation "com.google.android.exoplayer:exoplayer:r2.5.4"

    // statusbar
    implementation "com.jaeger.statusbarutil:library:1.5.1"

}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

androidExtensions {
    experimental = true
}
